From c74f7db1fb21e1296b6c5df3cdfdcbe467a4a8d9 Mon Sep 17 00:00:00 2001
From: Massimiliano Galli <massimiliano.galli@cern.ch>
Date: Wed, 26 Feb 2020 13:20:54 +0100
Subject: [PATCH] [Exp PyROOT] Dynamically import the correct version of
 libcppyyX_Y

In cppyy/__init__.py we use sys.version_info to get the version number of
the Python interpreter we're running with, and we append the numbers to
'libcppyy' in order to find the correct shared library.

In CPyCppyyModule we need to define an init function with the same name of
the shared libraries, so in this case we use the preprocessor directives
to construct a function with the correct name.
---
 .../cppyy/CPyCppyy/src/CPyCppyyModule.cxx     | 15 ++++++++----
 .../cppyy/cppyy/python/cppyy/__init__.py      | 24 +++++++++++++++++++
 2 files changed, 34 insertions(+), 5 deletions(-)

diff --git a/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPyCppyyModule.cxx b/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPyCppyyModule.cxx
index 3653596167..2f39146505 100644
--- a/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPyCppyyModule.cxx
+++ b/bindings/pyroot_experimental/cppyy/CPyCppyy/src/CPyCppyyModule.cxx
@@ -756,6 +756,12 @@ static PyMethodDef gCPyCppyyMethods[] = {
     {nullptr, nullptr, 0, nullptr}
 };
 
+#define QuoteIdent(ident) #ident
+#define QuoteMacro(macro) QuoteIdent(macro)
+#define LIBCPPYY_NAME "libcppyy" QuoteMacro(PY_MAJOR_VERSION) "_" QuoteMacro(PY_MINOR_VERSION)
+
+#define CONCAT(a, b, c, d) a##b##c##d
+#define LIBCPPYY_INIT_FUNCTION(a, b, c, d) CONCAT(a, b, c, d)
 
 #if PY_VERSION_HEX >= 0x03000000
 struct module_state {
@@ -776,10 +782,9 @@ static int cpycppyymodule_clear(PyObject* m)
     return 0;
 }
 
-
 static struct PyModuleDef moduledef = {
     PyModuleDef_HEAD_INIT,
-    "libcppyy",
+    LIBCPPYY_NAME,
     nullptr,
     sizeof(struct module_state),
     gCPyCppyyMethods,
@@ -792,10 +797,10 @@ static struct PyModuleDef moduledef = {
 
 //----------------------------------------------------------------------------
 #define CPYCPPYY_INIT_ERROR return nullptr
-extern "C" PyObject* PyInit_libcppyy()
+LIBCPPYY_INIT_FUNCTION(extern "C" PyObject* PyInit_libcppyy, PY_MAJOR_VERSION, _, PY_MINOR_VERSION) ()
 #else
 #define CPYCPPYY_INIT_ERROR return
-extern "C" void initlibcppyy()
+LIBCPPYY_INIT_FUNCTION(extern "C" void initlibcppyy, PY_MAJOR_VERSION, _, PY_MINOR_VERSION) ()
 #endif
 {
 // Initialization of extension module libcppyy.
@@ -824,7 +829,7 @@ extern "C" void initlibcppyy()
 #if PY_VERSION_HEX >= 0x03000000
     gThisModule = PyModule_Create(&moduledef);
 #else
-    gThisModule = Py_InitModule(const_cast<char*>("libcppyy"), gCPyCppyyMethods);
+    gThisModule = Py_InitModule(const_cast<char*>(LIBCPPYY_NAME), gCPyCppyyMethods);
 #endif
     if (!gThisModule)
         CPYCPPYY_INIT_ERROR;
diff --git a/bindings/pyroot_experimental/cppyy/cppyy/python/cppyy/__init__.py b/bindings/pyroot_experimental/cppyy/cppyy/python/cppyy/__init__.py
index b3b1b84251..1558c3269c 100644
--- a/bindings/pyroot_experimental/cppyy/cppyy/python/cppyy/__init__.py
+++ b/bindings/pyroot_experimental/cppyy/cppyy/python/cppyy/__init__.py
@@ -49,6 +49,30 @@ __all__ = [
 from ._version import __version__
 
 import os, sys, sysconfig, warnings
+import importlib
+
+# import libcppyy with Python version number
+major, minor = sys.version_info[0:2]
+py_version_str = '{}_{}'.format(major, minor)
+libcppyy_mod_name = 'libcppyy' + py_version_str
+importlib.import_module(libcppyy_mod_name)
+
+# ensure 'import libcppyy' will find the versioned module
+sys.modules['libcppyy'] = sys.modules[libcppyy_mod_name]
+
+# tell cppyy that libcppyy_backend is versioned
+if 'CPPYY_BACKEND_LIBRARY' in os.environ:
+    if os.environ['CPPYY_BACKEND_LIBRARY'].rfind('.') > 0:
+        lib_name, suff = os.environ['CPPYY_BACKEND_LIBRARY'].split('.')
+        if py_version_str not in lib_name:
+            lib_name += py_version_str
+        os.environ['CPPYY_BACKEND_LIBRARY'] = '.'.join([
+            lib_name, suff])
+    else:
+        if py_version_str not in os.environ['CPPYY_BACKEND_LIBRARY']:
+            os.environ['CPPYY_BACKEND_LIBRARY'] += py_version_str
+else:
+    os.environ['CPPYY_BACKEND_LIBRARY'] = 'libcppyy_backend' + py_version_str
 
 if not 'CLING_STANDARD_PCH' in os.environ:
     local_pch = os.path.join(os.path.dirname(__file__), 'allDict.cxx.pch')
-- 
2.17.1

